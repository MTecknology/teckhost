#!/bin/bash
##
# This will modify an existing ISO and embed a preseed and grub config.
##

# Primary script logic
main() {
	parse_options "$@"
	safety_checks

	# Create a temp directory
	TH_TEMP="$(mktemp -d)"

	# Build customized ISO with preseed
	case "$TH_OS" in
	debian)
		unpack_source || die 'Failed: iso unpack'
		# Create a testseed if patch exists
		[ -f "$TH_DATA/testseed.cfg" ] || make "$TH_DATA/testseed.cfg"
		inject_preseed || die 'Failed: inject preseed'
		inject_grubconfig || die 'Failed: grub config'
		repack_debian || die 'Failed: repack'
		;;
	ubuntu)
		unpack_source || die 'Failed: iso unpack'
		scrape_iso  || die 'Failed: iso scrape'
		repack_ubuntu || die 'Failed: repack'
		;;
	esac

	# Clean up temp data
	if is_true "$TH_KEEP"; then
		log "$WARN" "Not removing temporary directory at $TH_TEMP"
	else
		rm -rf "$TH_TEMP"
	fi
}

# Read options into environment
parse_options() {
	# Defaults
	export TH_SRC="${TH_SRC:-./debian-netinst.iso}"
	export TH_DST="${TH_DST:-./teckhost.iso}"
	export TH_DATA="${TH_DATA:-./iso/debian12}"
	export THT_GRUBTEST="${THT_GRUBTEST:-hostname=testpc1 BS_pillar_root=test/pillar BS_gitfs_base=master TH_SALTGPG=https://raw.githubusercontent.com/MTecknology/teckhost/master/test/pillar/skeys.gpg}"
	export TH_KEEP="${TH_KEEP:-False}"
	export LOG_LEVEL="${LOG_LEVEL:-1}"

	while getopts 'i:o:d:kb:l:h' OPT; do
		case "$OPT" in
			i) TH_SRC="$OPTARG";;
			o) TH_DST="$OPTARG";;
			d) TH_DATA="$OPTARG";;
			s) TH_OS="$OPTARG";;
			k) TH_KEEP=True;;
			b) THT_GRUBTEST="$OPTARG";;
			l) LOG_LEVEL="$OPTARG";;
			h) show_help; exit 1;;
			*) die "Unexpected argument provided: '$OPT'";;
		esac
	done

	# Guess target OS if not defined
	if [ -z "$TH_OS" ]; then
		case "$TH_DST" in
			(*[Dd]ebian*) TH_OS='debian';;
			(*[Uu]buntu*) TH_OS='ubuntu';;
		esac
	fi

	# Enable real debugging
	[ "${LOG_LEVEL:-1}" -lt 1 ] && set -x
}

# Show help text (an explanation of options)
show_help() {
	t="$(printf '\t')"
	cat <<-EOF
	Modify a Debian ISO and inject a preseed.cfg file.

	Usage: build_iso [options] -i <input> -o <output> -d <iso_data>

	Options:
	  -i X${t}Pristine ISO to be modified (can be http)
	  -o X${t}Output ISO
	  -d X${t}Directory with source data for ISO modification
	  -b X${t}Options added to test entry in grub boot menu (replace)
	  -s X${t}Target OS (debian, ubuntu)
	  -x X${t}Additional options added to test entry (append)
	  -l X${t}Log level (0=Debug, 1=Info, 2=Warn, 3=Error)
	  -k${t}Keep temporary directory
	  -h${t}Print this help text and exit

	Defaults (can be set as environment variables):
	  TH_SRC${t}./debian-netinst.iso
	  TH_DST${t}./teckhost.iso
	  TH_DATA${t}./iso/debian12
	  TH_OS${t}<guess from source path>
	  TH_KEEP${t}True
	  THT_GRUBTEST${t}BS_pillar_root=test/pillar TH_SALTGPG=https://raw.githubusercontent.com/MTecknology/teckhost/master/test/pillar/skeys.gpg
	  LOG_LEVEL${t}1  (info)
	EOF
}

safety_checks() {
	log "$INFO" 'Running sanity checks'

	# Check for required commands
	for cmd in 'bsdtar' 'syslinux' 'xorriso'; do
		command_present "$cmd" || die 'Missing dependencies, must have: bsdtar (libarchive-tools) syslinux xorriso'
	done

	# Verify provided values point at files
	[ -d "$TH_DATA" ] || die 'Data directory not found'

	# Other option checks
	is_int "$LOG_LEVEL" || die 'Log level must be an integer (0-3)'
}

# Extract contents of an ISO
unpack_source() {
	# Verify source exists
	[[ ! -f "$TH_SRC" ]] && die "Source file ($TH_SRC) does not exist"

	# Actually unpack source
	bsdtar -C "$TH_TEMP" -xf "$TH_SRC"

	# Make it editable (must be reverted before regen)
	chmod -R +w "$TH_TEMP"
}

# Insert an auto-only grub boot config
inject_grubconfig() {
	log "$DEBUG" 'Copying grub config'

	# Copy template and update template value(s)
	sed -e "s|TEMPLATE_GRUBTEST|$THT_GRUBTEST|" "$TH_DATA/grub-bios.cfg" >"$TH_TEMP/isolinux/menu.cfg"
	sed -e "s|TEMPLATE_GRUBTEST|$THT_GRUBTEST|" "$TH_DATA/grub-efi.cfg" >"$TH_TEMP/boot/grub/grub.cfg"
}

# Inject a custom preseed into initrd
inject_preseed() {
	log "$DEBUG" 'Injecting preseed file'
	# Copy preseed and testseed config files
	cp "$TH_DATA/preseed.cfg" "$TH_TEMP/mainseed.cfg"
	cp "$TH_DATA/testseed.cfg" "$TH_TEMP/"

	# Not the cleanest assumption, but we error if files are missisg
	basedir="$(dirname "$0")/../"
	# Copy preseed-executed scripts from repository
	# (copying locally helps avoid issues with stale cache)
	cp "$basedir/iso/debconf_early" "$TH_TEMP/debconf_early" || return 1
	cp "$basedir/bootstrap" "$TH_TEMP/bootstrap" || return 1

	# Injection magic
	log "$DEBUG" 'Injecting preseed into initrd'
	pushd "$TH_TEMP" >/dev/null || return 1
	gunzip install.amd/initrd.gz
	# NOTE: preseed.cfg is *always* loaded
	echo 'mainseed.cfg' | cpio --quiet -o -H newc -A -F install.amd/initrd
	echo 'testseed.cfg' | cpio --quiet -o -H newc -A -F install.amd/initrd
	gzip install.amd/initrd
	find . -follow -type f -print0 2>/dev/null | xargs --null md5sum >md5sum.txt
	popd >/dev/null || return 1
}
#
# Build the modified Debian ISO
repack_debian() {
	log "$INFO" "Bulding ISO at $TH_DST"
	# Some weird requirement; things break without it
	chmod -R -w "$TH_TEMP"
	# command partially copied from iso in .disk/isofs
	# see: https://wiki.debian.org/RepackBootableISO
	xorriso -as mkisofs -quiet -r -V 'Teckhost Installer' \
		-isohybrid-mbr /usr/lib/ISOLINUX/isohdpfx.bin \
		-b isolinux/isolinux.bin -c isolinux/boot.cat -boot-load-size 4 \
		-boot-info-table -no-emul-boot -eltorito-alt-boot \
		-e boot/grub/efi.img -no-emul-boot -isohybrid-gpt-basdat -isohybrid-apm-hfsplus \
		-o "$TH_DST" "$TH_TEMP" 2>/dev/null || die 'Building ISO failed'
	# -w is annoying, so we undo it right away
	chmod -R +w "$TH_TEMP"
}

# Extract EFI partition and MBR from ISO
scrape_iso() {
	# Read iso table
	fd="$(mmls -MB "$TH_SRC" | grep EFI)"

	# Verify only one EFI partition is found
	[ "$(echo "$fd" | wc -l)" == '1' ] || return 1

	# Find start and end of EFI partition (also image)
	IFS=' ' read -r id slot start end length _ <<< "$fd"

	# Extract EFI
	dd if="$TH_SRC" skip="$start" count="$length" of="$TH_TEMP/EFI.img" || return 1

	# Extract MBR
	dd if="$TH_SRC" bs=1 count=446 of="$TH_TEMP/mbr.img" || return 1
}

# Build the modified Ubuntu ISO
repack_ubuntu() {
	log "$INFO" "Bulding ISO at $TH_DST"
}


##
# Functions copied from https://github.com/MTecknology/script-helpers
##

# Log Levels
DEBUG=0; INFO=1; WARN=2; ERROR=3
readonly DEBUG INFO WARN ERROR
export DEBUG INFO WARN ERROR

# Check if a command (or alias/function) is available.
command_present() {
	command -v "$1" >/dev/null && return 0
	alias | grep -q "\s$1=" 2>/dev/null && return 0
	return 1
}

# Print a formatted (critical) message and exit with status.
die() {
	# If first argument was an integer, use as exit_status
	case "$1" in
		(*[!0123456789]*) _exit_status=1;;
		(*) _exit_status="$1"; shift;;
	esac

	printf '*** CRITICAL: %s ***\n' "$1"
	exit "$_exit_status"
}

# Print a formatted message if env[LOG_LEVEL] >= level.
log() {
	if [ "${LOG_LEVEL:-1}" -le "$1" ]; then
		case "$1" in
			(0) _lvl='DEBUG';;
			(1) _lvl='INFO';;
			(2) _lvl='WARN';;
			(3) _lvl='ERROR';;
			(*) _lvl='UNKNOWN';;
		esac

		printf '*** %s: %s ***\n' "$_lvl" "$2"
	fi
}

# Evaluate if a given string is an integer.
is_int() {
	_i="$1"
	[ "$(printf "%.1s" "$_i")" = '-' ] &&
		_i="$(printf '%s' "$1" | cut -c2-)"
	case "$_i" in
		('') return 1;;
		(*[!0123456789]*) return 1;;
		(*) return 0;;
	esac
}

# Evaluate if a given string is true-like (True, TrUE, true, 0).
is_true() {
	# Everything to lower-case (True|TRUE|trUe -> true)
	_str="$(printf '%s' "$1" | tr '[:upper:]' '[:lower:]')"
	[ "$_str" = 'true' ] && return 0
	[ "$_str" = '' ] && return 1
	# False if number is non-zero.
	is_int "$_str" || return 1
	[ "$_str" -eq '0' ] 2>/dev/null && return 0

	return 1
}


##
# Script Kickoff
##

main "$@"
